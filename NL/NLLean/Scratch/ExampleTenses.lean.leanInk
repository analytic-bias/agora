[{"contents":"import NL.NL\nimport NL.NLAesop\nimport Paperproof\nnamespace NL\n\nsection EdRpdS\n-- Is E-R-S supposed to be encoded in the type or the term of the sentence?\n\n-- TODO FIXME ad-hoc encoding for demo only, to be re-written in the future\ninductive ReiAtom where\n| _e : ReiAtom\n| _r : ReiAtom\n| _s : ReiAtom\ninductive Rei where\n| na : Rei\n| reid : List ReiAtom -> Rei -- reid [_e, _r, _s] = E-R-S\ninductive Atom where\n| _np : Atom\n| _t : Atom -- FIXME one can encode time into type instead of valuation as well: Nat -> TenseAtom\n| _s : Rei -> Atom\ndef Value : Type := Bool × Nat -- truth × time\naxiom Entity : Type\naxiom PassP : Entity -> Entity -> Bool\ndef anteriorize : Rei -> Rei\n  | Rei.reid [a, b] => Rei.reid [a, ReiAtom._r, b]\n  | _ => Rei.na -- FIXME you can give it typecheck errors, but as this is only a demo we wouldn't bother\nopen Atom\ndef interpa : Atom -> Type\n  -- | _n => (Entity -> Bool)\n  | _np => Entity\n  | _s _ => Value\n  | _t => Nat -- TODO perhaps lift the time index to type?\nnotation:max (priority := high) \"[\" a \"]\" => (interpret Atom interpa Value a)\ndef np := !Atom._np\ndef s t := !(Atom._s t)\ndef t := !Atom._t\n-- λ | _ ⇒ not working\nnoncomputable def passed : [ (np \\\\ (s (Rei.reid [ReiAtom._e, ReiAtom._s]))) // np ] :=\n  λ | (k , y) => k λ | (x , k') => k' ((PassP x y) , 1)\n-- assume had is transitive, TODO polymorphic had\nnoncomputable def had {r : Rei} : [ (np \\\\ (((s (anteriorize r)) // np) // ((np \\\\ (s r)) // np))) ] :=\n  λ | (x , k) => k λ | (k , y) => k λ | (t , k) => (y ((λ z => z (x , (λ | (b , n) => t (b , (n + 1))))) , k))\nnoncomputable def by_ {r : Rei} : [ ((s r) \\\\ (s r)) // t ] :=\n  λ | (k , t) => k (λ | ((b , n) , s) => s (b , (fun t':Nat => t' - 1 + n) t)) -- bad inference (or is it lazy evaluation on type level?)\naxiom they : [np]\naxiom exams : [np]\n-- def then_ : [t] := 10 -- FIXME failed to synthesize instance OfNat (interpret Atom interpa Value t) 10; why? (interpret Atom interpa Value t) ↝ 10 doesit need coercion?\naxiom then_ : [t]\n\nopen NLCalculus\n-- ⇒ \\\\ b\n-- ⇐ // s\ndef NL := NLCalculus Atom\n-- lexer: example\nnotation:0 \"𝕃 \" a => NLCalculus Atom a\nset_option pp.explicit false\nset_option pp.universes false\nset_option pp.notation true\n\n/-- Notice that the non-associativity is exactly the cause of ambiguity of natural languages. -/\nexample {r : Rei} : 𝕃 ((\n    (((np ⊗\n    (np \\\\ (((s (anteriorize r)) // np) // ((np \\\\ (s r)) // np)))) ⊗\n    ((np \\\\ (s r)) // np)) ⊗\n    np) ⊗\n    ((((s (anteriorize r)) \\\\ (s (anteriorize r))) // t) ⊗\n    t)) ⊢ s (anteriorize r)) := ","_type":"text"},{"messages":[],"goals":[{"name":"","hypotheses":[],"conclusion":"Goals accomplished! 🐙","_type":"goal"}],"contents":"by","_type":"sentence"},{"messages":[],"goals":[{"name":"","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  (((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np) ⊗\n      (((s (anteriorize r) \\\\ s (anteriorize r)) // t) ⊗ t) ⊢\n    s (anteriorize r)","_type":"goal"}],"contents":"\n  ","_type":"sentence"},{"messages":[],"goals":[{"name":"a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  ((s (anteriorize r) \\\\ s (anteriorize r)) // t) ⊗ t ⊢\n    ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np \\\\ s (anteriorize r)","_type":"goal"}],"contents":"apply rbt","_type":"sentence"},{"messages":[],"goals":[{"name":"","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  (((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np) ⊗\n      (((s (anteriorize r) \\\\ s (anteriorize r)) // t) ⊗ t) ⊢\n    s (anteriorize r)","_type":"goal"}],"contents":"\n  ","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  (s (anteriorize r) \\\\ s (anteriorize r)) // t ⊢\n    (((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np \\\\\n        s (anteriorize r)) //\n      t","_type":"goal"}],"contents":"apply rst","_type":"sentence"},{"messages":[],"goals":[{"name":"","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  (((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np) ⊗\n      (((s (anteriorize r) \\\\ s (anteriorize r)) // t) ⊗ t) ⊢\n    s (anteriorize r)","_type":"goal"}],"contents":"\n  ","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  s (anteriorize r) \\\\ s (anteriorize r) ⊢\n    ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np \\\\ s (anteriorize r)","_type":"goal"},{"name":"a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 t ⊢ t","_type":"goal"}],"contents":"apply ms","_type":"sentence"},{"messages":[],"goals":[{"name":"","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  (((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np) ⊗\n      (((s (anteriorize r) \\\\ s (anteriorize r)) // t) ⊗ t) ⊢\n    s (anteriorize r)","_type":"goal"}],"contents":"\n  ","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  s (anteriorize r) \\\\ s (anteriorize r) ⊢\n    ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np \\\\ s (anteriorize r)","_type":"goal"}],"contents":"·","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  s (anteriorize r) \\\\ s (anteriorize r) ⊢\n    ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np \\\\ s (anteriorize r)","_type":"goal"},{"name":"a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 t ⊢ t","_type":"goal"}],"contents":" ","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np ⊢ s (anteriorize r)","_type":"goal"},{"name":"a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 s (anteriorize r) ⊢ s (anteriorize r)","_type":"goal"}],"contents":"apply mb","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  s (anteriorize r) \\\\ s (anteriorize r) ⊢\n    ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np \\\\ s (anteriorize r)","_type":"goal"}],"contents":"\n    ","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np ⊢ s (anteriorize r)","_type":"goal"}],"contents":"·","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np ⊢ s (anteriorize r)","_type":"goal"},{"name":"a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 s (anteriorize r) ⊢ s (anteriorize r)","_type":"goal"}],"contents":" ","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 (np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np) ⊢ s (anteriorize r) // np","_type":"goal"}],"contents":"apply rst","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np ⊢ s (anteriorize r)","_type":"goal"}],"contents":"\n      ","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np))) ⊢ (s (anteriorize r) // np) // ((np \\\\ s r) // np)","_type":"goal"}],"contents":"apply rst","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np ⊢ s (anteriorize r)","_type":"goal"}],"contents":"\n      ","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a.a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)) ⊢ np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np))","_type":"goal"}],"contents":"apply rbt","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np ⊢ s (anteriorize r)","_type":"goal"}],"contents":"\n      ","_type":"sentence"},{"messages":[],"goals":[{"name":"","hypotheses":[],"conclusion":"Goals accomplished! 🐙","_type":"goal"}],"contents":"apply NL.trefl","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  s (anteriorize r) \\\\ s (anteriorize r) ⊢\n    ((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np \\\\ s (anteriorize r)","_type":"goal"}],"contents":"\n    ","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 s (anteriorize r) ⊢ s (anteriorize r)","_type":"goal"}],"contents":"·","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 s (anteriorize r) ⊢ s (anteriorize r)","_type":"goal"}],"contents":" ","_type":"sentence"},{"messages":[],"goals":[{"name":"","hypotheses":[],"conclusion":"Goals accomplished! 🐙","_type":"goal"}],"contents":"apply NL.trefl","_type":"sentence"},{"messages":[],"goals":[{"name":"","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  (((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np) ⊗\n      (((s (anteriorize r) \\\\ s (anteriorize r)) // t) ⊗ t) ⊢\n    s (anteriorize r)","_type":"goal"}],"contents":"\n  ","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 t ⊢ t","_type":"goal"}],"contents":"·","_type":"sentence"},{"messages":[],"goals":[{"name":"a.a.a","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃 t ⊢ t","_type":"goal"}],"contents":" ","_type":"sentence"},{"messages":[],"goals":[{"name":"","hypotheses":[],"conclusion":"Goals accomplished! 🐙","_type":"goal"}],"contents":"apply NL.trefl","_type":"sentence"},{"contents":"\n\n/- w/o trefl:\n  apply rbt\n  apply rst\n  apply ms\n  · apply mb\n    · apply rst\n      apply rst\n      apply rbt\n      apply mb\n      · apply arefl\n      · apply ms\n        · apply ms\n          · apply arefl\n          · apply arefl\n        · apply ms\n          · apply mb\n            · apply arefl\n            · apply arefl\n          · apply arefl\n    · apply arefl\n  · apply arefl\n-/\n\n-- set_option trace.aesop true\ndef sample_proof : 𝕃 ((\n    (((np ⊗\n    (np \\\\ (((s (anteriorize r)) // np) // ((np \\\\ (s r)) // np)))) ⊗\n    ((np \\\\ (s r)) // np)) ⊗\n    np) ⊗\n    ((((s (anteriorize r)) \\\\ (s (anteriorize r))) // t) ⊗\n    t)) ⊢ s (anteriorize r)) := ","_type":"text"},{"messages":[],"goals":[{"name":"","hypotheses":[],"conclusion":"Goals accomplished! 🐙","_type":"goal"}],"contents":"by","_type":"sentence"},{"messages":[],"goals":[{"name":"","hypotheses":[{"type":"Rei","names":["r"],"body":"","_type":"hypothesis"}],"conclusion":"𝕃\n  (((np ⊗ (np \\\\ ((s (anteriorize r) // np) // ((np \\\\ s r) // np)))) ⊗ ((np \\\\ s r) // np)) ⊗ np) ⊗\n      (((s (anteriorize r) \\\\ s (anteriorize r)) // t) ⊗ t) ⊢\n    s (anteriorize r)","_type":"goal"}],"contents":"\n  ","_type":"sentence"},{"messages":[{"contents":"Try this: apply NL.NLCalculus.rbt\n  apply NL.NLCalculus.rst\n  apply NL.NLCalculus.ms\n  · apply NL.NLCalculus.mb\n    · apply NL.NLCalculus.rst\n      apply NL.NLCalculus.rst\n      apply NL.NLCalculus.rbt\n      apply NL.trefl\n    · apply NL.trefl\n  · apply NL.trefl","_type":"message"}],"goals":[{"name":"","hypotheses":[],"conclusion":"Goals accomplished! 🐙","_type":"goal"}],"contents":"aesop? (options := { maxRuleApplications := 200 }) (rule_sets [rsNL])","_type":"sentence"},{"contents":"\nnoncomputable def human_readable := denote Atom interpa Value sample_proof ((((they , had) , passed) , exams) , (by_ , then_)) id\nset_option maxRecDepth 2048\n","_type":"text"},{"messages":[{"contents":"(PassP they exams, Nat.succ (Nat.succ (Nat.rec 0 (fun n n_ih => n) then_)))","_type":"message"}],"goals":[],"contents":"#reduce","_type":"sentence"},{"contents":" human_readable\n\nend EdRpdS\n","_type":"text"}]